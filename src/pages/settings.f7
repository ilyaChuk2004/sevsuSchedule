<template>
  <div id='settingsViewPopup' class="popup">
    <div class="view">
      <div class="handler" id="settingsViewHandler"></div>
      <div class="page">
        <div class="page-content p">
          <div class="top">
            <h1>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
            <div class="list no-hairlines drop">
              <div class="tit"> –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:</div>
              <ul>
                <li class="item-content item-input">
                  <div class="item-inner">
                    <div class="item-input-wrap">
                      <input id="autocomplete-dropdown-all" type="text" placeholder="${groupt()}" autocomplete="off" />
                    </div>
                  </div>
                </li>
              </ul>
            </div>
            <div class="list no-hairlines bt">
              <div class="tit"> –ï—ë –Ω–µ—Ç? </div>
              <ul>
                <li class="togglee ripple ripple-dark-white overflow-hidden">
                  <a href="https://t.me/chuk2004" class="external">
                    <button
                      class="col button active-state-f button-round no-margin-vertical ripple ripple-dark-white overflow-hidden">–ù–∞–ø–∏—à–∏—Ç–µ
                      –º–Ω–µ</button>
                  </a>
                </li>
              </ul>
            </div>
            <div class="list no-hairlines drop">
              <div class="tit"> –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–æ–¥–≥—Ä—É–ø–ø—É:</div>
              <ul>
                <li class="item-content item-input">
                  <div class="item-inner">
                    <div class="item-input-wrap">
                      <input id="autocomplete-dropdown-pod" type="text" placeholder="${podgroup}" autocomplete="off" />
                    </div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
          <img class="settingsImg" src=${imgSrc()} alt=""/>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
  export default (props, { $store, $f7, $update, $el, $, $onMounted, $onUnmounted }) => {
   let imgSrc= ()=>{ return 'img/chuk'+app.device.prefersColorScheme()+'.svg'}
    let fruits;
    let pfruits;
    let podgroup=state.appData.podgroup
    let groupt=()=>{
      if (group=='–ü–ò/–±-21-1-–æ') {
        return '–ü–ò/–±-21-1-–æ üëë'
      }else{
        return group
      }
    }
    $f7.request.post('https://ichuk.ru/cock/api/collections/get/groups?token=79766710864c138a7f377f20821886',
      {         fields: {
          name: 1
        },filter:{
          pub:'1'
        } })
      .then(function (res) {
       let reew= JSON.parse(res.data).entries
       fruits=reew.map((it) => {
          return it.name
        })
        window.reew = fruits
      });
    $onMounted((mount) => {
      let autocompleteDropdownAll = $f7.autocomplete.create({
        inputEl: '#autocomplete-dropdown-all',
        openIn: 'dropdown',
        source: function (query, render) {
          var results = [];
          // Find matched items
          for (var i = 0; i < fruits.length; i++) {
            
            if (fruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) {
              if (fruits[i] == '–ü–ò/–±-21-1-–æ') {
                results.push('–ü–ò/–±-21-1-–æ üëë')
              } else {
                results.push(fruits[i])
              }
            };
          }
          // Render items by passing array with result items
          render(results);
        },
        on: {
          change: function (e) {
            if (e[0]!=state.appData.group.name) {
              // group=e[0]
              if (e[0] == '–ü–ò/–±-21-1-–æ üëë') {
                e[0]= '–ü–ò/–±-21-1-–æ'
              }
              state.appData.group.name=e[0]
              localStorage.group=JSON.stringify(state.appData.group)
            }
          }
        }
      });
      pfruits=['‚Ö†', '‚Ö°', '–Ω–µ—Ç']
      let autocompleteDropdownPod = $f7.autocomplete.create({
        inputEl: '#autocomplete-dropdown-pod',
        openIn: 'dropdown',
        source: function (query, render) {
          var results = [];
          // Find matched items
          // for (var i = 0; i < pfruits.length; i++) {
          //   if (pfruits[i].toLowerCase().indexOf(query.toLowerCase()) >= 0) results.push(pfruits[i]);
          // }
          results=pfruits
          // Render items by passing array with result items
          render(results);
        },
        on: {
          change: function (e) {
            console.log(e)
            if (e[0]!=state.appData.podgroup) {
              // group=e[0]
              state.appData.podgroup=e[0]
              localStorage.podgroup=JSON.stringify(state.appData.podgroup)
              document.body.setAttribute('pod', e[0])
            }
          }
        }
      });

    })
    return $render;
  }
</script>