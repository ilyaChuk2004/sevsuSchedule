<template>
  <div class="page" data-name="home">
    <!-- Top Navbar -->
    <!-- Scrollable page content-->

    <div class="fab fab-right-bottom fab2">
      <a href="#">
        <i class="icon f7-icons">question</i>
        <i class="icon f7-icons">xmark</i>
      </a>
      <div class="fab-buttons fab-buttons-top">
        <a class="fab-label-button fab-close" href="/bell/">
          <i class="icon f7-icons">bell_fill</i><span class="fab-label">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤</span>
        </a>
      </div>
    </div>


    <div @click="${tod}" class="fab fab-right-bottom ttip fab1" delay='100' ttipText='–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é'>
      <a href="#">
        <i class="icon f7-icons">calendar_today</i>
      </a>
    </div>
    <div class="page-content ptr-content" data-ptr-distance="90">
      <div class="ptr-preloader">
        <div class="preloader"></div>
        <div class="ptr-arrow"></div>
      </div>
      <div>
        <div class="lastUpdate">–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${lastUpdate()}</div>
        <a href="/settings/">
          <i class="icon f7-icons settings ripple ripple-dark-white ttip" ttipText="–ù–∞—Å—Ç—Ä–æ–π–∫–∏" 
          >gear_alt_fill</i>
        </a>
        <!-- <a href="/settings/"> -->
          <i class="icon f7-icons refreshBtn ripple ripple-dark-white ttip" ttipText="–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" 
           @click="${refreshBtn}" style="opacity:${state.appData.nowRequest==1?'0.4':'j'}"
          >arrow_2_circlepath_circle_fill
        </i>
        <!-- </a> -->
        <h1>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h1>
        <div class="now">
          <div class="tit">–ó–∞–≥—Ä—É–∑–∫–∞<span id="num"></span>... <img src="" /></div>
          <div class="end">–∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ <span id="end"></span></div>
          <div class="time">(–≤ <span id="hours"></span>)</div>
        </div>
        <div class="swiper">
          <!-- Additional required wrapper -->
          <div class="swiper-wrapper"></div>
          <!-- If we need pagination -->
          <!-- If we need navigation buttons -->
          <!-- If we need scrollbar -->
        </div>
        <!-- <div class="today" onclick="today()">
                <img src="today.svg" alt="" />
              </div> -->
      </div>
    </div>
    <div class="leftSh sh"></div>
    <div class="swiper-pagination"></div>
    <div class="rightSh sh"></div>
  </div>
</template>
<script>
  import { work } from '../js/work';
  import { today } from '../js/work';
  export default (props, { $store, $f7, $update, $el, $, $onMounted, $onUnmounted }) => {
    let ptr;

    function refreshBtn() {
      onRefresh(0, 0)
    }

    $f7.on("e-progress", (p) => {
      console.log(p)
      $f7.progressbar.set(p);
    })
    function tod(e) {
      today('t')
    }

    let lastUpdate = () => {
      let div = Math.trunc(((+new Date) - new Date(+localStorage.last)) / 86400000)
      if (div == 0) {
        let hours = Math.trunc(((+new Date) - new Date(+localStorage.last)) / 3600000)

        if (hours == 0) {
          let min = Math.trunc(((+new Date) - new Date(+localStorage.last)) / 60000)

          if (min == 0) {
            let sec = Math.trunc(((+new Date) - new Date(+localStorage.last)) / 600)
            return `${getWord(['—Å–µ–∫—É–Ω–¥', "—Å–µ–∫—É–Ω–¥—É", "—Å–µ–∫—É–Ω–¥—ã"], sec)} –Ω–∞–∑–∞–¥`
          } else {
            return `${getWord(['–º–∏–Ω—É—Ç', "–º–∏–Ω—É—Ç—É", "–º–∏–Ω—É—Ç—ã"], min)} –Ω–∞–∑–∞–¥`
          }
        } else {
          return `${getWord(['—á–∞—Å–æ–≤', "—á–∞—Å", "—á–∞—Å–∞"], hours)} –Ω–∞–∑–∞–¥`
        }
      } else {
        return `${getWord(['–¥–Ω–µ–π', "–¥–µ–Ω—å", "–¥–Ω—è"], div)} –Ω–∞–∑–∞–¥`
      }
    }

    function getWord(words, word) {
      let n = word + ''
      // let words = ['–¥–Ω–µ–π', '–¥–µ–Ω—å', '–¥–Ω—è']

      if (last(n, 1) == '0' || last(n, 1) == '5' || last(n, 1) == '6' ||
        last(n, 1) == '7' || last(n, 1) == '8' || last(n, 1) == '9' || last(n, 2) == '10' ||
        last(n, 2) == '11' || last(n, 2) == '12' || last(n, 2) == '13' || last(n, 2) == '14') {
        return n + ' ' + words[0]
      } else if (last(n, 1) == '1') {
        return n + ' ' + words[1]
      } else if (last(n, 1) == '2' || last(n, 1) == '3' || last(n, 1) == '4') {
        return n + ' ' + words[2]
      }

      function last(str, c) {
        return str.slice(c * -1)
      }
    }

    console.log('üëã')


    $f7.on('e-refresh', (notCheck)=>{
      
      if (!notCheck && navigator.onLine) {
        ptr.refresh()
      }else{
        let toast = app.toast.create({
          text: '–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞',
          closeTimeout: 2000,

        })
      }
    })
    $onMounted((mount) => {
      state.appData.nowRequest=0;

      $f7.progressbar.hide('.progressbar')
      work()

      setTimeout(() => {
        try {
          app.swiper.get('.swiper').update()
        } catch (error) {

        }
        ptr = $f7.ptr.get('.ptr-content')
        ptr.on('refresh', (e) => {
          // console.log(e)
          onRefresh()

        })
      }, 100);
    })

    function onRefresh(notCheck, ref){
      
      if (state.appData.nowRequest==0) {
        if (ref) {
          ptr.refresh()
        }
        if (navigator.onLine) {

          work(1)
          $f7.on("e-reloaded", (st) => {
            ptr.done()
            if (st) {
              let toast = app.toast.create({
                text: '–û—à–∏–±–∫–∞...',
                closeTimeout: 2000,

              })

              toast.open()
            }
          })
        } else if (!notCheck) {
          ptr.done()
          let toast = app.toast.create({
            text: '–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞',
            closeTimeout: 2000,

          })

          toast.open()
          ptr.done()
          setTimeout(() => {
            ptr.done()
          }, 100);
        }
      }
    }

    setInterval(() => {
      $update(()=>{
        try {
          app.swiper.get('.swiper').update()
        } catch (error) {
          
        }
      })
    }, 1000);
    return $render;
  }
</script>